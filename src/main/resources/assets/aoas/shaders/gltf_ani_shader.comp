#version 430
#extension GL_ARB_compute_shader : require

uniform int floatsPerVertex = -1;

struct PartRenderInfo {
    mat4 pose;             // 模型变换矩阵
    mat3 normal;           // 法线矩阵
    int lightmapU;
    int lightmapV;
    int UOffset;
    int VOffset;
};

// 原始数据
layout(std430, binding = 0) readonly buffer OriginalVertexData {
    float originalVertexBuffer[];
};

// part渲染状态
layout(std430, binding = 1) readonly buffer BoneRenderStatus {
    PartRenderInfo partList[];
};

// part渲染状态
layout(std430, binding = 2) readonly buffer VertexBoneIndexData {
    int indexList[];
};

// 渲染buffer
layout(std430, binding = 3) buffer RenderVertexData {
    float renderVertexBuffer[];
};


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main() {

    if (floatsPerVertex == -1) {
        return;
    }

    uint vertexId = gl_GlobalInvocationID.x;

    PartRenderInfo info = partList[indexList[vertexId]];

    for (int i = 0; i < floatsPerVertex; i++) {
        uint srcIndex = vertexId * floatsPerVertex + i;
        renderVertexBuffer[srcIndex] = originalVertexBuffer[srcIndex];
    }

}